{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Numalogic \u00b6 Numalogic is a collection of ML models and algorithms for real-time data analytics and AIOps including anomaly detection. Numalogic can be installed as a library and used to build end-to-end ML pipelines. For a streaming real time data processing, it can also be paired with our steaming data platform Numaflow . Key Features \u00b6 Ease of use: simple and efficient tools for predictive data analytics Reusability: all the functionalities can be re-used in various contexts Model selection: easy to compare, validate, fine-tune and choose the model that works best with each data set Data processing: readily available feature extraction, scaling, transforming and normalization tools Extensibility: adding your own functions or extending over the existing capabilities Model Storage: out-of-the-box support for MLFlow and support for other model ML lifecycle management tools Use Cases \u00b6 Deployment failure detection System failure detection for node failures or crashes Fraud detection Network intrusion detection Forecasting on time series data Getting Started \u00b6 For set-up information and running your first pipeline using numalogic, please see our getting started guide .","title":"Home"},{"location":"#numalogic","text":"Numalogic is a collection of ML models and algorithms for real-time data analytics and AIOps including anomaly detection. Numalogic can be installed as a library and used to build end-to-end ML pipelines. For a streaming real time data processing, it can also be paired with our steaming data platform Numaflow .","title":"Numalogic"},{"location":"#key-features","text":"Ease of use: simple and efficient tools for predictive data analytics Reusability: all the functionalities can be re-used in various contexts Model selection: easy to compare, validate, fine-tune and choose the model that works best with each data set Data processing: readily available feature extraction, scaling, transforming and normalization tools Extensibility: adding your own functions or extending over the existing capabilities Model Storage: out-of-the-box support for MLFlow and support for other model ML lifecycle management tools","title":"Key Features"},{"location":"#use-cases","text":"Deployment failure detection System failure detection for node failures or crashes Fraud detection Network intrusion detection Forecasting on time series data","title":"Use Cases"},{"location":"#getting-started","text":"For set-up information and running your first pipeline using numalogic, please see our getting started guide .","title":"Getting Started"},{"location":"data-generator/","text":"Data Generator \u00b6 Numalogic provides a data generator to create some synthetic time series data, that can be used as train or test data sets. Using the synthetic data, we can: 1. Compare and evaluate different ML algorithms, since we have labeled anomalies 2. Understand different types of anomalies, and our models' performance on each of them 3. Recreate realtime scenarios Generate multivariate timeseries \u00b6 from numalogic.synthetic import SyntheticTSGenerator ts_generator = SyntheticTSGenerator ( seq_len = 8000 , num_series = 3 , freq = \"T\" , primary_period = 720 , secondary_period = 6000 , seasonal_ts_prob = 0.8 , baseline_range = ( 200.0 , 350.0 ), slope_range = ( - 0.001 , 0.01 ), amplitude_range = ( 10 , 75 ), cosine_ratio_range = ( 0.5 , 0.9 ), noise_range = ( 5 , 15 ), ) # shape: (8000, 3) with column names [s1, s2, s3] ts_df = ts_generator . gen_tseries () # Split into test and train train_df , test_df = ts_generator . train_test_split ( ts_df , test_size = 1000 ) Inject anomalies \u00b6 Now, once we generate the synthetic data like above, we can inject anomalies into the test data set using AnomalyGenerator . AnomalyGenerator supports the following types of anomalies: 1. global: Outliers in the global context 2. contextual: Outliers only in the seasonal context 3. causal: Outliers caused by a temporal causal effect 4. collective: Outliers present simultaneously in two or more time series You can also use anomaly_ratio to adjust the ratio of anomalous data points wrt number of samples. from numalogic.synthetic import AnomalyGenerator # columns to inject anomalies injected_cols = [ \"s1\" , \"s2\" ] anomaly_generator = AnomalyGenerator ( train_df , anomaly_type = \"contextual\" , anomaly_ratio = 0.3 ) outlier_test_df = anomaly_generator . inject_anomalies ( test_df , cols = injected_cols , impact = 1.5 )","title":"Data generator"},{"location":"data-generator/#data-generator","text":"Numalogic provides a data generator to create some synthetic time series data, that can be used as train or test data sets. Using the synthetic data, we can: 1. Compare and evaluate different ML algorithms, since we have labeled anomalies 2. Understand different types of anomalies, and our models' performance on each of them 3. Recreate realtime scenarios","title":"Data Generator"},{"location":"data-generator/#generate-multivariate-timeseries","text":"from numalogic.synthetic import SyntheticTSGenerator ts_generator = SyntheticTSGenerator ( seq_len = 8000 , num_series = 3 , freq = \"T\" , primary_period = 720 , secondary_period = 6000 , seasonal_ts_prob = 0.8 , baseline_range = ( 200.0 , 350.0 ), slope_range = ( - 0.001 , 0.01 ), amplitude_range = ( 10 , 75 ), cosine_ratio_range = ( 0.5 , 0.9 ), noise_range = ( 5 , 15 ), ) # shape: (8000, 3) with column names [s1, s2, s3] ts_df = ts_generator . gen_tseries () # Split into test and train train_df , test_df = ts_generator . train_test_split ( ts_df , test_size = 1000 )","title":"Generate multivariate timeseries"},{"location":"data-generator/#inject-anomalies","text":"Now, once we generate the synthetic data like above, we can inject anomalies into the test data set using AnomalyGenerator . AnomalyGenerator supports the following types of anomalies: 1. global: Outliers in the global context 2. contextual: Outliers only in the seasonal context 3. causal: Outliers caused by a temporal causal effect 4. collective: Outliers present simultaneously in two or more time series You can also use anomaly_ratio to adjust the ratio of anomalous data points wrt number of samples. from numalogic.synthetic import AnomalyGenerator # columns to inject anomalies injected_cols = [ \"s1\" , \"s2\" ] anomaly_generator = AnomalyGenerator ( train_df , anomaly_type = \"contextual\" , anomaly_ratio = 0.3 ) outlier_test_df = anomaly_generator . inject_anomalies ( test_df , cols = injected_cols , impact = 1.5 )","title":"Inject anomalies"},{"location":"quick-start/","text":"Quick Start \u00b6 Install Numalogic and experiment with different tools available. Prerequisites: \u00b6 Poetry Jupyter Installation: \u00b6 Run the following command to install the dependencies and build locally. #install poetry curl -sSL https://install.python-poetry.org | python3 - #activate virtual env poetry shell #install dependencies poetry install Using Jupyter Notebook: \u00b6 Start Jupyter Notebook, navigate to the examples folder and open the quick start Jupyter notebook. You can play with different available options for each step. jupyter Notebook .","title":"Quick start"},{"location":"quick-start/#quick-start","text":"Install Numalogic and experiment with different tools available.","title":"Quick Start"},{"location":"quick-start/#prerequisites","text":"Poetry Jupyter","title":"Prerequisites:"},{"location":"quick-start/#installation","text":"Run the following command to install the dependencies and build locally. #install poetry curl -sSL https://install.python-poetry.org | python3 - #activate virtual env poetry shell #install dependencies poetry install","title":"Installation:"},{"location":"quick-start/#using-jupyter-notebook","text":"Start Jupyter Notebook, navigate to the examples folder and open the quick start Jupyter notebook. You can play with different available options for each step. jupyter Notebook .","title":"Using Jupyter Notebook:"}]}